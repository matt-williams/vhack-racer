<resources>

<string name="mapVertexShader"><![CDATA[
attribute vec3 xyz;
attribute vec2 uv;
uniform mat4 matrix;
varying highp vec2 uv2;

void main() {
  gl_Position = matrix * vec4(xyz, 1);
  uv2 = uv;
}
]]></string>

<string name="mapFragmentShader"><![CDATA[
varying highp vec2 uv2;
uniform sampler2D terrain;
uniform highp vec2 terrainSize;
uniform sampler2D map;
uniform highp vec2 mapSize;

void main() {
  highp vec2 tile = texture2D(map, uv2).xy * 255.0;
  gl_FragColor = texture2D(terrain, (tile + mod(uv2 / mapSize, 1.0)) * terrainSize);
}
]]></string>

<string name="skyboxVertexShader"><![CDATA[
attribute vec3 xyz;
attribute vec2 uv;
uniform mat4 matrix;
varying highp vec2 uv2;

void main() {
  gl_Position = matrix * vec4(xyz, 1);
  uv2 = uv;
}
]]></string>

<string name="skyboxFragmentShader"><![CDATA[
varying highp vec2 uv2;
uniform sampler2D skybox;

void main() {
  gl_FragColor = texture2D(skybox, uv2);
}
]]></string>

<string name="pointVertexShader"><![CDATA[
attribute vec2 xz;
attribute vec2 uv;
uniform mat4 rotationTranslation;
uniform mat4 projection;
varying highp vec2 uv2;

void main() {
  gl_Position = projection * (rotationTranslation * vec4(xz.x, 0, xz.y, 1) + vec4((uv.x * 2.0) - 1.0, 1.0 - (uv.y * 2.0), 0, 0));
  uv2 = uv;
}
]]></string>

<string name="tuxVertexShader"><![CDATA[
attribute vec4 xzyr;
attribute vec2 uv;
uniform mat4 rotationTranslation;
uniform mat4 projection;
uniform float orientation;
varying highp vec2 uv2;

void main() {

  gl_Position = projection * (rotationTranslation * vec4(xzyr.x, xzyr.z, xzyr.y, 1) + vec4((uv.x * 2.0) - 1.0, 1.0 - (uv.y * 2.0), 0, 0));
  uv2 = vec2((uv.x + mod(floor((orientation - xzyr.w) * 12.0 / 6.283) + 6.0, 12.0)) / 12.0, uv.y);
}
]]></string>
 
<string name="pointFragmentShader"><![CDATA[
varying highp vec2 uv2;
uniform sampler2D billboard;

void main() {
  highp vec4 color = texture2D(billboard, uv2);
  if (color.a == 0.0) {
      discard;
  }
  gl_FragColor = color;
}
]]></string>

</resources>