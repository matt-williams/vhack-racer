<resources>

<string name="mapVertexShader"><![CDATA[
attribute vec2 xz;
attribute vec2 uv;
uniform mat4 matrix;
varying highp vec2 uv2;

void main() {
  gl_Position = matrix * vec4(xz.x, -1.0, xz.y, 1);
  uv2 = uv;
}
]]></string>

<string name="mapFragmentShader"><![CDATA[
varying highp vec2 uv2;
uniform sampler2D terrain;
uniform sampler2D map;
uniform highp vec2 terrainSize;
uniform highp vec2 mapSize;

void main() {
  highp vec2 tile = texture2D(map, uv2).xy * 255.0;
  gl_FragColor = texture2D(terrain, (tile + mod(uv2 / mapSize, 1.0)) * terrainSize);
}
]]></string>

<string name="skyboxVertexShader"><![CDATA[
attribute vec3 xyz;
attribute vec2 uv;
uniform mat4 matrix;
varying highp vec2 uv2;

void main() {
  gl_Position = matrix * vec4(xyz, 1);
  uv2 = uv;
}
]]></string>

<string name="skyboxFragmentShader"><![CDATA[
varying highp vec2 uv2;
uniform sampler2D skybox;

void main() {
  gl_FragColor = texture2D(skybox, uv2);
}
]]></string>

<!-- 
<string name="pointVertexShader"><![CDATA[
attribute vec2 xz;
uniform mat4 matrix;
varying highp vec2 uv2;

void main() {
  highp vec4 point = matrix * vec4(xz.x, 0, xz.y, 1);
  gl_Position = point;
  uv2 = vec2(1.41 * sin(xzr.z), -1.41 * cos(xzr.z));
}
  highp vec4 point = matrix * vec4(xzuv.x * 1.0, -1, xzuv.y * 1.0, 1);
  gl_Position = point + vec4((xzuv.z - 0.5), (0.5 - xzuv.w), 0, 0) / point.z;

  highp vec4 point = matrix * vec4((xzuv.x * 1.0) + (xzuv.z * 2.0) - 1.0, 1.0 - (xzuv.w * 2.0), xzuv.y * 1.0, 1);

]]></string>
 -->

<string name="pointVertexShader"><![CDATA[
attribute vec4 xzuv;
uniform mat4 matrix;
uniform mat4 rotation;
varying highp vec2 uv2;

void main() {
  highp vec4 offset = rotation * vec4((xzuv.z * 2.0) - 1.0, 1.0 - (xzuv.w * 2.0), 0, 0);
  highp vec4 point = vec4(xzuv.x, 0, xzuv.y, 1) + offset;
  gl_Position = matrix * point;
  uv2 = xzuv.zw;
}
]]></string>
 
<string name="pointFragmentShader"><![CDATA[
varying highp vec2 uv2;
uniform sampler2D billboard;

void main() {
  gl_FragColor = texture2D(billboard, uv2);
}
]]></string>

</resources>